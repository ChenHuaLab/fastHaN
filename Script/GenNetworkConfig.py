#!/usr/bin/python3
# -*- coding: utf-8 -*-

#*************************************************************************
#    > File Name: GenNetworkConfig.py
#    > Author: xlzh
#    > Mail: xiaolongzhang2015@163.com 
#    > Created Time: 2021年12月02日 星期四 22时20分30秒
#*************************************************************************

'''
generate the config file for tcsBU webserver (group.csv and haplotype.csv)

Input: 
   1. json file generated by fastHaN
   2. meta file prepared by the user (column-1: sampleID, column-2: sample group)
   
Output:
   1. group.csv (color of each group)
   2. haplotype.csv (group of each haplotype)
'''


import sys
import json
from random import randint


def json_parse(json_file):
    ''' func: parse the json file to obtain the haplotye
    '''
    hap_list = []
    json_wraper = json.load(open(json_file, 'r'))

    # node -> {'id': 0, 'frequency': 1.0, 'title1': 'Sample1', 'title2': 'Sample1;Sample2'}
    for node in json_wraper['nodes']: 
        hap_list.extend(node['title2'].split(';'))

    return hap_list


def read_meta_file(meta_file):
    ''' func: read the meta file and obtain the country for each individual
        meta_dict = {'EPI_ISL_6814923': 'Australia', ...}
    '''
    meta_dict = {}
    meta_fp = open(meta_file, 'r')

    for line in meta_fp:
        l = line.rstrip().split('\t')
        meta_dict[l[0]] = l[1]  # l[0] -> sampleid; l[1] -> country

    return meta_dict


def gen_hap_config(hap_list, meta_dict):
    ''' func: generate the haplotype config
        hap_conf_list = [(sample1, China), (sample2, Korean), ...]
    '''
    hap_conf_list = []

    for hap in hap_list:  # EPI_ISL_6832737 or 'IN12'
        if hap.startswith('IN'):  # skip the intermediate node
            continue

        elif hap not in meta_dict:
            sys.stderr.write("[warning] the group of %s is not given in the meta file\n" % hap)

        else:
            country = meta_dict[hap].replace(' ', '')
            hap_conf_list.append((hap, country))

    return hap_conf_list


def _random_color():
    ''' func: generate color randomly
    '''
    colorArr = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
    color_list = []

    for i in range(6):
        color_list.append(colorArr[randint(0, 14)])

    return '#' + ''.join(color_list)


def gen_group_config(hap_conf_list):
    ''' func: generate the group config
        group_conf_list = [(China, '#FF011B', 'none'), (Korean, '2693FF', 'none'), ...]
    '''
    group_conf_list = []
    count_dict = {}

    for item in hap_conf_list:
        if item[1] != 'Default' and item[1] not in count_dict:
            rand_color = _random_color()
            count_dict[item[1]] = rand_color
            group_conf_list.append((item[1], rand_color, 'none'))

    return group_conf_list


def write_conf(hap_conf_list, group_conf_list, out_prefix):
    ''' func: write the config file
    '''
    # write the haplotype config file
    hap_fp = open(out_prefix + '_hapconf.csv', 'w')
    for hap in hap_conf_list:
        hap_fp.write("%s;%s\n" % (hap[0], hap[1]))

    # write the group config file
    group_fp = open(out_prefix + '_groupconf.csv', 'w')
    for group in group_conf_list:
        group_fp.write("%s;%s;%s\n" % (group[0], group[1], group[2]))

    hap_fp.close()
    group_fp.close()


def main():
    args = sys.argv
    if len(args) != 4:
        sys.stderr.write("usage: python GetNetworkConfig.py <in.json> <in.meta> <out_prefix>\n")
        sys.exit(-1)

    json_file = args[1]
    meta_file = args[2]
    out_prefix = args[3]

    hap_list = json_parse(json_file)
    meta_dict = read_meta_file(meta_file)
    hap_conf_list = gen_hap_config(hap_list, meta_dict)
    group_conf_list = gen_group_config(hap_conf_list)
    write_conf(hap_conf_list, group_conf_list, out_prefix)
    

if __name__ == '__main__':
    main()
